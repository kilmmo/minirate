// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package msg

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FeerequestClient is the client API for Feerequest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeerequestClient interface {
	ReqFeeInfo(ctx context.Context, in *Station, opts ...grpc.CallOption) (Feerequest_ReqFeeInfoClient, error)
	ReqFilePart(ctx context.Context, in *PartInfo, opts ...grpc.CallOption) (*PartData, error)
}

type feerequestClient struct {
	cc grpc.ClientConnInterface
}

func NewFeerequestClient(cc grpc.ClientConnInterface) FeerequestClient {
	return &feerequestClient{cc}
}

func (c *feerequestClient) ReqFeeInfo(ctx context.Context, in *Station, opts ...grpc.CallOption) (Feerequest_ReqFeeInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &Feerequest_ServiceDesc.Streams[0], "/Feerequest/ReqFeeInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &feerequestReqFeeInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Feerequest_ReqFeeInfoClient interface {
	Recv() (*FeeInfo, error)
	grpc.ClientStream
}

type feerequestReqFeeInfoClient struct {
	grpc.ClientStream
}

func (x *feerequestReqFeeInfoClient) Recv() (*FeeInfo, error) {
	m := new(FeeInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *feerequestClient) ReqFilePart(ctx context.Context, in *PartInfo, opts ...grpc.CallOption) (*PartData, error) {
	out := new(PartData)
	err := c.cc.Invoke(ctx, "/Feerequest/ReqFilePart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeerequestServer is the server API for Feerequest service.
// All implementations must embed UnimplementedFeerequestServer
// for forward compatibility
type FeerequestServer interface {
	ReqFeeInfo(*Station, Feerequest_ReqFeeInfoServer) error
	ReqFilePart(context.Context, *PartInfo) (*PartData, error)
	mustEmbedUnimplementedFeerequestServer()
}

// UnimplementedFeerequestServer must be embedded to have forward compatible implementations.
type UnimplementedFeerequestServer struct {
}

func (UnimplementedFeerequestServer) ReqFeeInfo(*Station, Feerequest_ReqFeeInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method ReqFeeInfo not implemented")
}
func (UnimplementedFeerequestServer) ReqFilePart(context.Context, *PartInfo) (*PartData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReqFilePart not implemented")
}
func (UnimplementedFeerequestServer) mustEmbedUnimplementedFeerequestServer() {}

// UnsafeFeerequestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeerequestServer will
// result in compilation errors.
type UnsafeFeerequestServer interface {
	mustEmbedUnimplementedFeerequestServer()
}

func RegisterFeerequestServer(s grpc.ServiceRegistrar, srv FeerequestServer) {
	s.RegisterService(&Feerequest_ServiceDesc, srv)
}

func _Feerequest_ReqFeeInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Station)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FeerequestServer).ReqFeeInfo(m, &feerequestReqFeeInfoServer{stream})
}

type Feerequest_ReqFeeInfoServer interface {
	Send(*FeeInfo) error
	grpc.ServerStream
}

type feerequestReqFeeInfoServer struct {
	grpc.ServerStream
}

func (x *feerequestReqFeeInfoServer) Send(m *FeeInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _Feerequest_ReqFilePart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeerequestServer).ReqFilePart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Feerequest/ReqFilePart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeerequestServer).ReqFilePart(ctx, req.(*PartInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// Feerequest_ServiceDesc is the grpc.ServiceDesc for Feerequest service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Feerequest_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Feerequest",
	HandlerType: (*FeerequestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReqFilePart",
			Handler:    _Feerequest_ReqFilePart_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReqFeeInfo",
			Handler:       _Feerequest_ReqFeeInfo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "message.proto",
}
